;============================================
; Script Name: Land fishing trainer
; Author: -BookWibble-
; Version: 1.0
; Client Tested with: 5.0.4e
; EUO version tested with: 1.5 (v90)
; Shard OSI / FS:  FS / OSI
; Revision Date:  07-Oct-06
; Public Release: 16-Oct-06
; Global variables:  none
; Purpose: Trains fishing on land - includes specialised railwriter
;============================================

; A special thank you to RoadKill and Locke.
; To RoadKill for his WriteFastDOSArray sub and to Locke for his wait_for subs.
; Without these guys this would have been very much harder to write

  set %freeshard #true
  set %fastSell #true
  set %MaxDistOnRail 6
  set %RailSubDir rails\    ;use just "set %RailSubDir" if you want rails in the EasyUO folder

  ;list to drop in bank/secure   ( gold, cut fish )  could add YDF if not eating 'mess of fish'
  set %Droptypes POF_IND

  set %FishTypes DQD_EQD_FQD_GQD
  set %KnifeTypes WSF
  set %PoleTypes KDF
  set %ShoeTypes CWI_AWI_NVI_OVI_PVI_QVI_ZVI_TVI
  set %WondrousFish YDF
  

  gosub setupVars

  repeat
  {
    gosub showMainMenu
    gosub MainMenuControl
    set %ReturnToMainMenu #false
    if #result = FISH
    {
      gosub getVars
      gosub showFishingMenu
      gosub FishLoop   ;stays in this loop indefinitely
    }
    else
    {
      if #result = RAIL
      {
        menu get Railname
        set %RailName #menures
        gosub showRailmakerMenu
        gosub RailmakerMenuControl
        set %ReturnToMainMenu #true
      }
    }
  }
  until %ReturnToMainMenu = #false


stop




;-----------------------------------------------------------------------
sub setupVars
  repeat
  {
    gosub getPole
    if #result = #false
      pause
  }
  until #result = #true
  repeat
  {
    gosub getKnife
    if #result = #false
      pause
  }
  until #result = #true
  
  set %CuttingDelay 15
  set %CheckWeight #false
  set %RailName landfishing

  set %FishingMsg1 already_fishing
  set %FishingMsg2 pull_out_an_item
  set %FishingMsg3 fail_to_catch_anything
  set %FishingMsg4 fish_don't_seem_to_be_biting
  
  set %BadCastingMsg target_cannot_be_seen
  
	set %ActionList1 Door_north
	set %ActionList2 Door_south
	set %ActionList3 Door_west
	set %ActionList4 Door_east
	set %ActionList5 Sell_shoes
	set %ActionList6 Bank_drop
	set %ActionList7 Secure_drop
	set %ActionList8 Trash_footwear
	set %ActionList9 Wait_1s
	set %ActionListCount 9
return

;-----------------------------------------------------------------------
sub getVars
  menu get Railname
  set %Railname #menures
  str pos %Railname .
  if #strres > 0
  {
    set %Filename #curpath , %RailSubDir , %Railname
  }
  else
  {
    set %Filename #curpath , %RailSubDir , %Railname , .txt
  }
  call %Filename
  if %endspot > 0
  {
    for %i 1 %endspot
    {
      if %X . %i = N/A
      {
        display Problem with rail  < %Filename >
        stop
      }
    }
  }
  else
  {
    display Failed to load rail  < %Filename >
    stop
  }

  menu get DropShoesCheckBox
   set %DropShoes #menures
  menu get EatWondrousCheckBox
   set %EatWondrous #menures
  
  set %Position 0
  set %Casts 0
  set %OddFishCaught 0
  set %FootwareFound 0
	set %FishCaught 0

return

;-----------------------------------------------------------------------
sub getPole
  finditem %PoleTypes C_ , #backpackid
  if #findkind <> -1
  {
    set %PoleID #findid
  }
  else
  {
    finditem %PoleTypes C_ , #charid
    if finditem <> -1
    {
      set %PoleID #findid
    }
    else
    {
      display Please get a fishing pole and press start again
      return #false
    }
  }
return #true

;-----------------------------------------------------------------------
sub getKnife
  finditem %KnifeTypes C_ , #backpackid
  if #findkind <> -1
  {
    set %KnifeID #findid
  }
  else
  {
    display Please get a cutting knife or blade and press start again
    return #false
  }
return #true

;-----------------------------------------------------------------------
sub WaitForJournalResult
  gosub wait_for MSG %FishingMsg1 %FishingMsg2 %FishingMsg3 %FishingMsg4 15
WaitIfAlreadyFishing:
  if #false in #result
  {
    event sysmessage problem - not returning fishing result in journal
    stop
  }
  else
  {
    if %FishingMsg1 in #result
    {
      set %jstart #jindex
      gosub wait_for MSG %FishingMsg2 %FishingMsg3 %FishingMsg4 15
      if #false in #result
      {
        event sysmessage problem - early refish not returning fishing result in journal
        stop
      }
      goto WaitIfAlreadyFishing
    }
    if %FishingMsg2 in #result
    {
      set %CheckWeight #true
      if mess in #journal
      {
        set %OddFishCaught %OddFishCaught + 1
      }
      else
      {
        if a_fish in #journal
        {
          set %FishCaught %FishCaught + 1
        }
        else
        {
          set %FootwareFound %FootwareFound + 1
        }
      }
    }
    if %FishingMsg4 in #result
    {
      set %SpotDry #true
    }
  }
return

;-----------------------------------------------------------------------
sub CutFish
  finditem %FishTypes C_ , #backpackid
  if #findkind <> -1
  {
    set #lobjectid %KnifeID
    set #ltargetkind 1
    for %i 1 #findcnt
    {
      set #findindex %i
      set #ltargetid #findid
      event macro 17
      target 4s
      event macro 22
      wait %CuttingDelay
    }
  }
  else
  {
    return #false
  }
  set #lobjectid %poleID
  set #ltargetx %LTargetX . %Position
  set #ltargety %LTargetY . %Position
  set #ltargetz %LTargetZ . %Position
  set #ltargettile %LTargetTile . %Position
  set #ltargetkind 3
return #true

;-----------------------------------------------------------------------
sub EatWondrous
  finditem %WondrousFish C_ , #backpackid
  if #findkind <> -1
  {
    set #lobjectid #findid
    event macro 17
    wait 2s
    set #lobjectid %poleID
  }
return

;-----------------------------------------------------------------------
sub CheckWeight
  if #weight >= #maxweight - 9
  {
    gosub CutFish
    if %DropShoes = #true
      gosub DropShoes
  }
return

;-----------------------------------------------------------------------
sub DropShoes
  repeat
  {
    finditem %ShoeTypes C_ , #backpackid
    if #findkind <> -1
    {
      set #findindex %i
      exevent drag #findid
      if %freeshard
      {
        exevent dropg #charposx #charposy #charposz
      }
      else
      {
      set %dx ( #random % 3 ) - 1 + #charposx
      set %dy ( #random % 3 ) - 1 + #charposy
      exevent dropg %dx %dy #charposz
      }
    }
  }
  until #findkind = -1
return

;-----------------------------------------------------------------------
sub FaceDoor
  set %DoorStr %Action . %Position
  str del %DoorStr 1 5
  if #strres = North
    event macro 5 1
  if #strres = South
    event macro 5 5
  if #strres = West
    event macro 5 7
  if #strres = East
    event macro 5 3
return

;-----------------------------------------------------------------------
sub FishLoop

freshspot:
  set %Position %Position + 1
  if %Position > %endspot
  {
    set %Position 0
    goto freshspot
  }
  gosub UpdateFishingMenu
  gosub MoveToPosition
  if #result <> FISH
  {
    goto freshspot
  }
  set %SpotDry #false
  set %CheckWeight #false

  set #lobjectid %poleID
  set #ltargetx %LTargetX . %Position
  set #ltargety %LTargetY . %Position
  set #ltargetz %LTargetZ . %Position
  set #ltargettile %LTargetTile . %Position
  set #ltargetkind 3

  gosub updateFishingMenu

  set %jstart #jindex + 1
  event macro 17
  target 4s
  event macro 22
  gosub WaitForJournalResult
  set %Casts %Casts + 1
  gosub UpdateFishingMenu

  if %SpotDry = #true
  {
    goto freshspot
  }
  if %CheckWeight = #true
  {
    if %EatWondrous = #true
      gosub EatWondrous
    gosub CheckWeight
  }

refish:
  set %jstart #jindex + 1
  
  event macro 17
  target 4s
  event macro 22
  gosub WaitForJournalResult
  set %Casts %Casts + 1
  gosub UpdateFishingMenu

  if %SpotDry = #true
  {
    goto freshspot
  }
  else
  {
    if %CheckWeight = #true
    {
      if %EatWondrous = #true
        gosub EatWondrous
      gosub CheckWeight
    }
    goto refish
  }

return

;-----------------------------------------------------------------------
sub MoveToPosition
movemore:
  set %timer #scnt
  event pathfind %X . %Position %Y . %Position %Z . %Position 0 5
  while %X . %Position <> #charposx || %Y . %Position <> #charposy || %Z . %Position <> #charposz
  {
    if %timer + 5 <= #scnt
      goto movemore
    wait 1
  }
  if %LTargetX . %Position <> N/A
  {
    return FISH
  }
  if %Action . %Position <> N/A
  {
    gosub Actions
    return ACTION
  }

return MOVED

;-----------------------------------------------------------------------
sub Actions
  if door in %Action . %Position
  {
    gosub FaceDoor
    event macro 12
    wait 1s
  }
  if sell in %Action . %Position
  {
    gosub SellShoes
  }
  if wait in %Action . %Position
  {
    set %aStr %Action . %Position
    str del %aStr 1 5
    wait #strres
  }
  if bank in %Action . %Position
  {
    set %oldcontid #contid
    msg %BankMessage
    while #contid = %oldcontid
      wait 1
    set %bankid #contid
    gosub DropItems %bankid
  }
  if secure in %Action . %Position
  {
    set %aStr %Action . %Position
    str del %aStr 1 12
    gosub DropItems #strres
  }
  if trash_footwear in %Action . %Position
  {
    set %aStr %Action . %Position
    str del %aStr 1 15
    gosub DropItems #strres
  }
return

;-----------------------------------------------------------------------
sub DropItems
  set %dropbagid %1
  finditem %DropTypes C_ , #backpackid
  if #findkind <> -1
  {
    for %i 1 #findcnt
    {
      set #findindex %i
      exevent drag #findid #findstack
      wait 5
      exevent dropc %dropbagid
      wait 10
  }
return

;-----------------------------------------------------------------------
sub MainMenuControl
  set %RetVal X
  
  set #menubutton X
  while #menubutton = X
    wait 1

  if #menubutton = BeginButton
  {
    set %RetVal FISH
  }
  if #menubutton = MakeRailButton
  {
    set %RetVal RAIL
  }

return %RetVal

;--------- EasyUO Menu Designer Code Begin ---------
sub showMainMenu
	menu Clear
	menu Window Title Land Fishing Trainer
	menu Window Color Purple
	menu Window Size 237 211
	menu Font Transparent #true
	menu Font Align Right
	menu Font Name MS Sans Serif
	menu Font Size 10
	menu Font Style b
	menu Font Color White
	menu Font BGColor Green
	menu Button BeginButton 44 172 85 29 Begin
	menu Font Size 8
	menu Font Style
	menu Font Color WindowText
	menu Font BGColor Window
	menu Edit Railname 12 12 109 %RailName
	menu Font Color White
	menu Font Align Left
	menu Font BGColor Purple
	menu Check DropShoesCheckBox 12 52 121 13 #false Drop shoes
	menu Check EatWondrousCheckBox 12 72 121 13 #true Eat 'wondrous' fish
	menu Font Color WindowText
	menu Font BGColor BtnFace
	menu Button MakeRailButton 148 12 81 21 Make Rail
	menu Show 421 270
return
;--------- EasyUO Menu Designer Code End ---------

;--------- EasyUO Menu Designer Code Begin ---------
sub showFishingMenu
	menu Clear
	menu Window Title Land Fishing
	menu Window Color Purple
	menu Window Size 181 211
	menu Font Transparent #true
	menu Font Align Right
	menu Font Name MS Sans Serif
	menu Font Size 8
	menu Font Style
	menu Font Color White
	menu Font Transparent #false
	menu Font Align Left
	menu Font BGColor Purple
	menu Text FMLabel1 8 8 Present skill
	menu Text FMLabel2 8 28 Skill gains
	menu Text FMLabel3 8 48 Location
	menu Text FMLabel4 8 68 Casts
	menu Text FMLabel5 8 88 Fish caught
	menu Text FMLabel6 8 108 Odd fish caught
	menu Text FMLabel7 8 128 Footware found
	menu Text FMLabel8 8 148 Time running
	menu Text FMLabel9 8 178 Catch rate

  chooseskill fish
  gosub makeDecimal #skill
	menu Text PresentSkill 92 8 #result
	menu Text SkillGains 92 28 0.0
	menu Text Location 92 48 0
	menu Text Casts 92 68 0
	menu Text FishCaught 92 88 0
	menu Text OddFishCaught 92 108 0
	menu Text FootwareFound 92 128 0
	menu Text TimeRunning 92 148 0
	menu Text CatchRate 92 178 0
  if #skill = #skillcap
  {
    display Well Done!! - you made it!$Stopping script now$$Please remember to vote for this script
;    stop
  }

	set %TimerStart #scnt
	set %SkillStart #skill
return
;--------- EasyUO Menu Designer Code End ---------

;--------- EasyUO Menu Designer Code Begin ---------
sub updateFishingMenu
  chooseskill fish

	menu Font Name MS Sans Serif
	menu Font Size 8
	menu Font Style
	menu Font Color White
	menu Font Transparent #false
	menu Font Align Left
	menu Font BGColor Purple

  gosub getSkillGain
  gosub getTimeRunning
  gosub makeDecimal #skill
	menu set PresentSkill #result
	menu set OddFishCaught %OddFishCaught
	menu set SkillGains %Skillgains
	menu set FootwareFound %FootwareFound
	menu set Location %Position
	menu set Casts %Casts
	menu set FishCaught %FishCaught
	menu set TimeRunning %Timerunning
  gosub getCatchRate
	menu set CatchRate #result , %

return
;--------- EasyUO Menu Designer Code End ---------

;-----------------------------------------------------------------------
sub getCatchRate
	set %Caught %OddFishCaught
	set %Caught %Caught + %FootwareFound
	set %Caught %Caught + %FishCaught
	set %BigNumber %Caught * 1000
	set %cr %BigNumber / %Casts
	gosub makeDecimal %cr
return #result

;-----------------------------------------------------------------------
sub getSkillGain
  set %Skillgains #skill - %SkillStart
  gosub makeDecimal %Skillgains
  set %Skillgains #result
return

;-----------------------------------------------------------------------
sub getTimeRunning
  set %Seconds #scnt - %TimerStart
  if %Seconds >= 3600
  {
    set %Hours %Seconds / 3600
    set %Seconds %Seconds % 3600
  }
  if %Seconds >= 60
  {
    set %Minutes %Seconds / 60
    set %Seconds %Seconds % 60
  }
  set %Timerunning
  if %Hours > 0
  {
    set %Timerunning %Hours , hr
    if %Hours > 1
      set %Timerunning %Timerunning , s
    set %Timerunning %Timerunning , #spc , : , #spc
  }
  if %Hours > 0 || %Minutes > 0
  {
    set %Timerunning %Timerunning , %Minutes , m , #spc , : , #spc
  }
  set %Timerunning %Timerunning , %Seconds , s
return

;--------- EasyUO Menu Designer Code Begin ---------
sub showRailmakerMenu
	menu Clear
	menu Window Title Land Fishing
	menu Window Color Purple
	menu Window Size 243 160
	menu Font Transparent #true
	menu Font Align Right
	menu Font Name MS Sans Serif
	menu Font Size 8
	menu Font Style
	menu Font Color White
	menu Font Transparent #false
	menu Font Align Left
	menu Font BGColor Purple
	menu Text EUOLabel3 8 48 Fish at
	menu Text EUOLabel2 8 28 Current
	menu Text EUOLabel4 8 8 Location
	menu Text EUOLabel5 50 28 X:
	menu Text EUOLabel6 95 28 Y:
	menu Text EUOLabel1 140 28 Z:
	menu Text EUOLabel8 50 48 X:
	menu Text EUOLabel9 95 48 Y:
	menu Text EUOLabel7 140 48 Z:
	menu Text EUOLabel10 185 48 Tile:
	menu Font Color WindowText
	menu Font BGColor Window
	menu List Create ActionListBox 8 72 130 40
  for %i 1 %ActionListCount
    menu List Add ActionListBox %ActionList . %i
	menu Font BGColor BtnFace
	menu Button FishHereButton 8 122 65 25 Fish here
	menu Button ActionButton 80 122 65 25 Action
	menu Button FinishedButton 172 122 65 25 Finished

	menu Font Align Right
	menu Font Name MS Sans Serif
	menu Font Size 8
	menu Font Style bold
	menu Font Color White
	menu Font Transparent #false
	menu Font Align Left
	menu Font BGColor Purple
  menu text CurrentLocation 60 8 %Position
  menu text CurrentX 60 28 #charposx
  menu text CurrentY 105 28 #charposy
  menu text CurrentZ 150 28 #charposz
  menu text FishX 60 48 #ltargetx
  menu text FishY 105 48 #ltargety
  menu text FishZ 150 48 #ltargetz
  menu text FishTile 205 48 #ltargettile

return
;--------- EasyUO Menu Designer Code End ---------

;-----------------------------------------------------------------------
sub SellShoes
  set %Sold #false
  repeat
  {
    finditem HS_IS G_9
    if #findkind <> -1
    {
      set %oldproperty
      event property #findid
      while #property = %oldproperty
        wait 1
      if Cobbler in #property
      {
        exevent popup #findid
        while #contposx <> 0 || #contposy <> 0 || #contkind <> WL
          wait 1
        click 35 55
        if %fastSell <> #true
        {
          while #contname <> bill_gump
            wait 1

          for %i 1 15
          {
            set %cx #contposx - 50
            set %cy #contposy - 137
            click %cx %cy d ;double click top item
            wait 5
            set %cx #contposx + 72
            set %cy #contposy - 16
            click %cx %cy   ;scroll down
            wait 5
          }
          wait 5
          set %cx #contposx + 45
          set %cy #contposy + 210
          click %cx %cy   ;scroll down
          set %Sold  #true
        }
        else
        {
          set %Sold #true   ;fastsell
          wait 10
        }
      }
      else
      {
        ignoreitem #findid
      }
    }
  }
  until %Sold = #true
return

;-----------------------------------------------------------------------
sub RailmakerMenuControl
  repeat
  {
    set #menubutton X
    while #menubutton = X
    {
      if ABS ( %LastMenuX - #charposx ) > 0 ||
       + ABS ( %LastMenuY - #charposy ) > 0 ||
       + ABS ( %LastMenuZ - #charposz ) > 0
      {
        set %LastMenuX #charposx
        set %LastMenuY #charposy
        set %LastMenuZ #charposz
        gosub updateRailMenu
      }
        
      if ABS ( %LastCharX - #charposx ) >= %MaxDistOnRail ||
       + ABS ( %LastCharY - #charposy ) >= %MaxDistOnRail ||
       + ABS ( %LastCharZ - #charposz ) >= %MaxDistOnRail
      {
        set %LastCharX #charposx
        set %LastCharY #charposy
        set %LastCharZ #charposz
        set %Position %Position + 1
        set %X . %Position #charposx
        set %Y . %Position #charposy
        set %Z . %Position #charposz
      }
      wait 1
    }
    if #menubutton = FishHereButton
    {
      repeat
      {
        set #targcurs 1
        set #lobjectid %PoleID
        set %jstart #jindex
        event macro 17
        while #targcurs = 1
          wait 2
        gosub wait_for MSG %BadCastingMsg 5 ;check we clicked a VALID location
        if #result = #true
          wait 15
      }
      until #result = #false

      set %Position %Position + 1
      set %X . %Position #charposx
      set %Y . %Position #charposy
      set %Z . %Position #charposz
      set %LTargetX . %Position #ltargetX
      set %LTargetY . %Position #ltargetY
      set %LTargetZ . %Position #ltargetZ
      set %LTargetTile . %Position #ltargettile
    }
    if #menubutton = ActionButton
    {
      menu get ActionListBox
      if #menures = 0
      {
        display action not selected $ Choose one and run again
        pause
        menu get ActionListBox
        if #menures = 0
        {
          display Still no action selected $ Quitting program
          stop
        }
      }
      set %ActionEntry %ActionList . #menures
      if %ActionList . #menures = Secure_drop || %ActionList . #menures = Trash_footwear
      {
        if %ActionList . #menures = Secure_drop
          display Please click the secure container now
        if %ActionList . #menures = Trash_footwear
          display Please click the trash container now
        set #targcurs 1
        while #targcurs = 1
          wait 5
        set %ActionEntry %ActionEntry , _ , #ltargetid
      }
      set %Position %Position + 1
      set %X . %Position #charposx
      set %Y . %Position #charposy
      set %Z . %Position #charposz
      set %Action . %Position %ActionEntry
    }
    if #menubutton = StartButton
    {
      set %X . %Position #charposx
      set %Y . %Position #charposy
      set %Z . %Position #charposz
      set %LastCharX %X . %Position
      set %LastCharY %Y . %Position
      set %LastCharZ %Z . %Position
      set %Position %Position + 1
    }
    if #menubutton = FinishedButton
    {
      gosub WriteToFile ;use RK's WriteFastDOSArray
    }
  }
  until #menubutton = FinishedButton

return

;-----------------------------------------------------------------------
sub makeDecimal
  set %input %1
  set %dec .
  if %1 < 10
    set %input 0 , %input
  str len %input
  set %len #strres - 1
  str left %input %len
  set %left #strres
  str right %input 1
  set %retVal %left , %dec , #strres
return %retVal

;-----------------------------------------------------------------------
sub updateRailMenu
	menu Font Align Right
	menu Font Name MS Sans Serif
	menu Font Size 8
	menu Font Style bold
	menu Font Color White
	menu Font Transparent #false
	menu Font Align Left
	menu Font BGColor Purple
  menu set CurrentLocation %Position
  menu set CurrentX #charposx
  menu set CurrentY #charposy
  menu set CurrentZ #charposz
  menu set FishX #ltargetx
  menu set FishY #ltargety
  menu set FishZ #ltargetz
  menu set FishTile #ltargettile
return

;-----------------------------------------------------------------------
sub WriteToFile ;use RK's WriteFastDOSArray
  set %array1 set , #spc , % , endspot , #spc , %Position
  set %RK 2
  for %i 1 %Position
  {
    set %array . %RK set , #spc , % , X , %i , #spc , %X . %i
    set %RK %RK + 1
    set %array . %RK set , #spc , % , Y , %i , #spc , %Y . %i
    set %RK %RK + 1
    set %array . %RK set , #spc , % , Z , %i , #spc , %Z . %i
    set %RK %RK + 1
    if %LTargetX . %i <> N/A
    {
      set %array . %RK set , #spc , % , LTargetX , %i , #spc , %LTargetX . %i
      set %RK %RK + 1
      set %array . %RK set , #spc , % , LTargetY , %i , #spc , %LTargetY . %i
      set %RK %RK + 1
      set %array . %RK set , #spc , % , LTargetZ , %i , #spc , %LTargetZ . %i
      set %RK %RK + 1
      set %array . %RK set , #spc , % , LTargetTile , %i , #spc , %LTargetTile . %i
      set %RK %RK + 1
    }
    if %Action . %i <> N/A
    {
      set %array . %RK set , #spc , % , Action , %i , #spc , %Action . %i
      set %RK %RK + 1
    }
  }
  
  str pos %Railname .
  if #strres > 0
  {
    set %Filename #curpath , %RailSubDir , %Railname
  }
  else
  {
    set %Filename #curpath , %RailSubDir , %Railname , .txt
  }

  gosub WriteFastDOSArray Array 1 %RK %Filename
  
return






              ;======================================================================
sub wait_for
;=================================================================
; This "wait_for" sub package was created by Locke. If you use these subs please keep this header intact. // end header.

; Documentation:
; to wait for a journal message you use this format:
; gosub wait_for MSG %what %ever %you %want %to %search %for 10
; MSG has to be the first parameter sent to the sub, and the time out (10 in this case)
; has to be at the end. When the message is found the script returns #true along with what is found.
; so if you scan for %chicken and %fish in your journal, and %fish was found the script returns #true , #spc , %fish.
; so you use if #true in #result instead of if #result = true, and if %POSSIBLEVAR in #result for some advanced handling of the journal.

;to wait for the gump you use a simular format: gosub wait_for GUMP XXX_XXX 10 %tools XXX XXX
; only the first three parameters are required, XXX_XXX is the gump to scan for and 10 is the time out.
; if the gump is found the sub returns #true. If the optional parameter %tools is set and the gump does not open within
; the time allowed. The sub will use the tool itself, and go back to waiting for the gump without having to call it again.
; the last two vars XXX and XXX are click locations for whatever u want to click, once the gump DOES open. To get the click locations for a button
; use this in another script once the gump in question is open:
; set #contpos 0 0
; halt
; hover ur mouse over the button and get the click X and Y for the buttons location. The wait_for GUMP sub adds
; those values to the #contposx and #contposy so the gump can be clicked on where ever it might be.
; it might require a change in how you code, but I think one line of code that does the actions of 10+ others makes it worth it.


; "wait_for core dispatcher" version 1.0 by Locke
nameSpace Push
namespace local LLNS
set !LPC #lpc
set #lpc 100
; below two lines clears all the !_A , %count lines that may have been set from another wait:for sub
for %i 0 !_A0
set !_A . %i N/A
; below two lines creatures vars out of the parameters sent to the sub.
for %i 0 %0
set !_A . %i % . %i
gosub wait_for_ , !_A1
set #lpc !lpc
namespace clear LLNS
namespace pop
if #true in #result || #false in #result
return #result
else
display ok You specified an unknown wait_for command. Script is halting.
halt


             ;======================================================================
sub wait_for_MSG
;=================================================================
; version 1.2 by Locke
for !test 0 !_A0
{
set !testme !_A . !test
if Loop in !testme 2
set !loopme #true
set !scanfor !_A0 - 1
if NOLOOP in !testme 2
set !loopme #false
set !scanfor !_A0 - 1
if NOLOOP notin !testme && LOOP notin !testme && !test = !_A0 2
set !scanfor !_A0
set !loopme #true
if !loopme = #true || !loopme = #false 1
set !test !_A0
}
set !wait !_A . !scanfor
set !_timeout #scnt + !wait
_lets_wait_for_a_message:
for %i %jstart #jindex
{
scanjournal %i
 for %ii 2 !scanfor
 {
 if !_A . %ii in #journal && %jstart <> #jindex
 {
 return #true , #spc , !_A . %ii
 }
 }
}
if !loopme = #true || !loopme = N/A
{
if !_timeout =< #scnt
return #false
wait 1
goto _lets_wait_for_a_message
}
else
return #false

             ;======================================================================
sub wait_for_GUMP
;=================================================================
; version 0.9 by Locke

; use gosub wait_for GUMP XXX_XXX 5 ; next three are optional %tools XXX XXX
; %1 sub specifiyer
; %2 gump to scan for
; %3 time out
; %4 optional var to reuse a tool to open the gump
; %5 optional Xvar to click on a spot when the gump opens
; %6 optional yvar to click on a spot when the gump opens
; version 0.5
set !_timeout #scnt + !_A3
_lets_wait_for_a_gump:
if #contsize = !_A2
{
if !_A5 <> N/A && !_A6 <> N/A
{
set !_clickx !_A5 + #contposx
set !_clicky !_A6 + #contposy
click !_clickx !_clicky
}
return #true
}

if !_timeout =< #scnt && !_A4 = N/A
return #false

if !_A4 <> N/A && !_timeout =< #scnt
{
finditem !_A4 C
         if #findkind <> -1
         {
         set #lobjectid #findid
         event macro 17 0
         set !_timeout #scnt + !_A3
         }
         else
         {
         return #false
         }
}
wait 1
goto _lets_wait_for_a_gump



;==================================
; Script Name: Sub WriteFastDOSArray
; Author: Roadkill
; Version: 1.2
; Client Tested with: 4.0.2a patch21
; EUO version tested with: build 0082
; Shard OSI / FS: OSI
; Revision Date: 11May04
; Public Release: 12May04
; Global Variables Used: none
; Purpose: write the values from an array into multiline file
;     using single DOS write for speed instead of slow loop.
;==================================
sub WriteFastDOSArray
  set !lpc #lpc
  set #lpc 1000
  set !doslengthlimit 2000
  ;get comspec for OS
  str left #osver 1
  set !filecmd cmd.exe
  if %_98 = 1
  {
    set !filecmd command.com
    set !doslengthlimit 500
  }
  ;test for allow exec
  if exec notin #opts
  {
    display OK You MUST have "allow Execute" enabled to write a file,$
    + and right now you DON'T! Fix it...you have 10 seconds.
    wait 10s
  }
  set !writestring %1 , %2
  set !writestring % . !writestring
  set !wstart %2 + 1
  set !crlf #spc , >> , #spc , %4 , #spc , && , #spc , echo , #spc
  for !z !wstart %3
  {
    set !element %1 , !z
    set !element % . !element
    str len !element
    set !elementlen #strres
    str len !writestring
    set !writestringlen #strres
    if !writestringlen + !elementlen > !doslengthlimit
    {
      execute !filecmd /c echo !writestring >> %4
      wait 5
      set !writestring #smc , ---bufferdump---
    }
    set !writestring !writestring , !crlf , !element
  }
  execute !filecmd /c echo !writestring >> %4
  wait 5
  set #lpc !lpc
return


